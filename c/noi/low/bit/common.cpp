int main() {
    int x = 0, k = 0;
    x >> 1;
    x << 1;
    (x << 1) | 1; // 最后添加1
    x | (1 << (k - 1)); // 右数第k位变1
    x & ~(1 << (k - 1)); // 右数第k位变0
    (x >> (k - 1)) & 1; // 获取右数第k位
    x & ((1 << k) - 1); // 截取最后k位
    x & (x + 1); // 右边连续的1变0
    x | (x + 1); // 右边第1个0变1
    x | (x - 1); // 右边连续的0变1
    x & (x - 1); // 右边第1个1变0
    (x ^ (x + 1)) >> 1; // 取右边连续的1

    int y = 0;
    (x ^ y) < 0; // 判断符号是否相同
    (x & (x - 1)) == 0; // 判断是否2的幂次
    // 有多少个1
    while(x) {
        x &= x - 1;
    }
    x & (-x); // 右第1个1
    int n = 0;
    // 枚举i的非空子集, O(3^n)
    for (int i = 1; i < 1 << n; i++)
        for (int j = i; j; j = (j - 1) & i);
    // 枚举超集, O(3^n)
    for (int i = 0; i < 1 << n; i++)
        for (int j = i; ;j = (j + 1) | i)
            if (j == (1 << n) - 1)
                break;

}
